"use strict";(self.webpackChunkreact_native_reanimated_docs=self.webpackChunkreact_native_reanimated_docs||[]).push([[3474],{3905:(e,t,r)=>{r.d(t,{Zo:()=>p,kt:()=>m});var n=r(67294);function o(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function l(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function a(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?l(Object(r),!0).forEach((function(t){o(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):l(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function i(e,t){if(null==e)return{};var r,n,o=function(e,t){if(null==e)return{};var r,n,o={},l=Object.keys(e);for(n=0;n<l.length;n++)r=l[n],t.indexOf(r)>=0||(o[r]=e[r]);return o}(e,t);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(n=0;n<l.length;n++)r=l[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(o[r]=e[r])}return o}var s=n.createContext({}),c=function(e){var t=n.useContext(s),r=t;return e&&(r="function"==typeof e?e(t):a(a({},t),e)),r},p=function(e){var t=c(e.components);return n.createElement(s.Provider,{value:t},e.children)},u="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},f=n.forwardRef((function(e,t){var r=e.components,o=e.mdxType,l=e.originalType,s=e.parentName,p=i(e,["components","mdxType","originalType","parentName"]),u=c(r),f=o,m=u["".concat(s,".").concat(f)]||u[f]||d[f]||l;return r?n.createElement(m,a(a({ref:t},p),{},{components:r})):n.createElement(m,a({ref:t},p))}));function m(e,t){var r=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var l=r.length,a=new Array(l);a[0]=f;var i={};for(var s in t)hasOwnProperty.call(t,s)&&(i[s]=t[s]);i.originalType=e,i[u]="string"==typeof e?e:o,a[1]=i;for(var c=2;c<l;c++)a[c]=r[c];return n.createElement.apply(null,a)}return n.createElement.apply(null,r)}f.displayName="MDXCreateElement"},12882:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>s,contentTitle:()=>a,default:()=>d,frontMatter:()=>l,metadata:()=>i,toc:()=>c});var n=r(83117),o=(r(67294),r(3905));const l={sidebar_position:2},a="useScrollViewOffset",i={unversionedId:"scroll/useScrollViewOffset",id:"scroll/useScrollViewOffset",title:"useScrollViewOffset",description:"This page was ported from an old version of the documentation.",source:"@site/docs/scroll/useScrollViewOffset.mdx",sourceDirName:"scroll",slug:"/scroll/useScrollViewOffset",permalink:"/react-native-reanimated/docs/scroll/useScrollViewOffset",draft:!1,editUrl:"https://github.com/software-mansion/react-native-reanimated/edit/main/docs/scroll/useScrollViewOffset.mdx",tags:[],version:"current",sidebarPosition:2,frontMatter:{sidebar_position:2},sidebar:"tutorialSidebar",previous:{title:"scrollTo",permalink:"/react-native-reanimated/docs/scroll/scrollTo"},next:{title:"useAnimatedScrollHandler",permalink:"/react-native-reanimated/docs/scroll/useAnimatedScrollHandler"}},s={},c=[{value:"Arguments",id:"arguments",level:3},{value:"<code>aref</code> RefObject<Animated.ScrollView>",id:"aref-refobjectanimatedscrollview",level:4},{value:"Returns",id:"returns",level:3},{value:"Example",id:"example",level:2}],p={toc:c},u="wrapper";function d(e){let{components:t,...r}=e;return(0,o.kt)(u,(0,n.Z)({},p,r,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"usescrollviewoffset"},"useScrollViewOffset"),(0,o.kt)("admonition",{type:"info"},(0,o.kt)("p",{parentName:"admonition"},"This page was ported from an old version of the documentation."),(0,o.kt)("p",{parentName:"admonition"},"As we're rewriting the documentation some of the pages might be a little outdated.")),(0,o.kt)("p",null,"This hook allows you to create animations based on the offset of a ",(0,o.kt)("inlineCode",{parentName:"p"},"ScrollView"),".\nThe hook automatically detects if the ",(0,o.kt)("inlineCode",{parentName:"p"},"ScrollView")," is horizontal or vertical."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},"useScrollViewOffset(aref: RefObject<Animated.ScrollView>) => [SharedValue<number>]\n")),(0,o.kt)("h3",{id:"arguments"},"Arguments"),(0,o.kt)("h4",{id:"aref-refobjectanimatedscrollview"},(0,o.kt)("inlineCode",{parentName:"h4"},"aref")," ","[RefObject","<","Animated.ScrollView",">]"),(0,o.kt)("p",null,"An Animated reference to a ",(0,o.kt)("inlineCode",{parentName:"p"},"ScrollView"),". The reference should be passed to the\nappropriate ",(0,o.kt)("inlineCode",{parentName:"p"},"ScrollView")," in the ",(0,o.kt)("inlineCode",{parentName:"p"},"ref")," prop."),(0,o.kt)("h3",{id:"returns"},"Returns"),(0,o.kt)("p",null,"A shared value which holds the current offset of the ",(0,o.kt)("inlineCode",{parentName:"p"},"ScrollView"),"."),(0,o.kt)("h2",{id:"example"},"Example"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-jsx"},"function ScrollViewOffsetExample() {\n  const aref = useAnimatedRef<Animated.ScrollView>();\n  const scrollHandler = useScrollViewOffset(aref);\n\n  useAnimatedStyle(() => {\n    console.log(scrollHandler.value);\n    return {};\n  });\n\n  return (\n    <>\n      <View style={styles.positionView}>\n        <Text>Test</Text>\n      </View>\n      <View style={styles.divider} />\n      <Animated.ScrollView\n        ref={aref}\n        style={styles.scrollView}>\n        {[...Array(100)].map((_, i) => (\n          <Text key={i} style={styles.text}>\n            {i}\n          </Text>\n        ))}\n      </Animated.ScrollView>\n    </>\n  );\n}\n")))}d.isMDXComponent=!0}}]);