"use strict";(self.webpackChunkreact_native_reanimated_docs=self.webpackChunkreact_native_reanimated_docs||[]).push([[2711],{19249:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>R,contentTitle:()=>N,default:()=>T,frontMatter:()=>y,metadata:()=>C,toc:()=>w});var a=n(83117),r=n(67294),i=n(3905),s=n(67177),o=n(24404),l=n(72400),d=n(28033),m=n(82334),u=n(10758),c=n(6328),p=n(38404),h=n(12717),f=n(49638);const k={code:"function anonymous(){const{measure,animatedRef,runOnJS,setText}=this._closure;const measurement=measure(animatedRef);if(measurement===null){return;}runOnJS(setText)(Math.floor(measurement.width));}",location:"/home/runner/work/react-native-reanimated/react-native-reanimated/docs/src/examples/MeasureBasic.jsx"};function g(){const e=(0,m.m)(),t=(0,u.y)(100),[n,a]=r.useState(t.value);return r.createElement(s.Z,{style:b.container},r.createElement(f.Z,{ref:e,style:{...b.box,width:t}}),r.createElement(o.Z,{style:b.label},"width: ",n),r.createElement(l.Z,{onPress:()=>{t.value=(0,c.j)(t.value+50,{},function(){const t=function(){const t=(0,p.L8)(e);null!==t&&(0,h.tC)(a)(Math.floor(t.width))};return t._closure={measure:p.L8,animatedRef:e,runOnJS:h.tC,setText:a},t.__initData=k,t.__workletHash=973222411005,t}())},title:"Click me"}))}const b=d.Z.create({container:{flex:1,alignItems:"center"},box:{height:100,backgroundColor:"#b58df1",borderRadius:20},label:{fontSize:24,marginVertical:16,color:"#b58df1"}}),v="import React from 'react';\nimport { Button, StyleSheet, View, Text } from 'react-native';\nimport Animated, {\n  measure,\n  runOnJS,\n  useAnimatedRef,\n  useSharedValue,\n  withTiming,\n} from 'react-native-reanimated';\n\nexport default function App() {\n  const animatedRef = useAnimatedRef();\n  const width = useSharedValue(100);\n  const [text, setText] = React.useState(width.value);\n\n  const handlePress = () => {\n    width.value = withTiming(width.value + 50, {}, () => {\n      // highlight-next-line\n      const measurement = measure(animatedRef);\n      if (measurement === null) {\n        return;\n      }\n\n      runOnJS(setText)(Math.floor(measurement.width));\n    });\n  };\n\n  return (\n    <View style={styles.container}>\n      <Animated.View ref={animatedRef} style={{ ...styles.box, width }} />\n      <Text style={styles.label}>width: {text}</Text>\n      <Button onPress={handlePress} title=\"Click me\" />\n    </View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    alignItems: 'center',\n  },\n  box: {\n    height: 100,\n    backgroundColor: '#b58df1',\n    borderRadius: 20,\n  },\n  label: {\n    fontSize: 24,\n    marginVertical: 16,\n    color: '#b58df1',\n  },\n});\n",y={sidebar_position:1},N="measure",C={unversionedId:"advanced/measure",id:"advanced/measure",title:"measure",description:"measure lets you synchronously get the dimensions and position of a view on the screen, all on the UI thread.",source:"@site/docs/advanced/measure.mdx",sourceDirName:"advanced",slug:"/advanced/measure",permalink:"/react-native-reanimated/docs/advanced/measure",draft:!1,editUrl:"https://github.com/software-mansion/react-native-reanimated/edit/main/docs/advanced/measure.mdx",tags:[],version:"current",sidebarPosition:1,frontMatter:{sidebar_position:1},sidebar:"tutorialSidebar",previous:{title:"Advanced APIs",permalink:"/react-native-reanimated/docs/category/advanced-apis"},next:{title:"useAnimatedReaction",permalink:"/react-native-reanimated/docs/advanced/useAnimatedReaction"}},R={},w=[{value:"Reference",id:"reference",level:2},{value:"Arguments",id:"arguments",level:3},{value:"<code>animatedRef</code>",id:"animatedref",level:4},{value:"Returns",id:"returns",level:3},{value:"Example",id:"example",level:2},{value:"Remarks",id:"remarks",level:2},{value:"Platform compatibility",id:"platform-compatibility",level:2}],x=e=>function(t){return console.warn("Component "+e+" was not imported, exported, or provided by MDXProvider as global scope"),(0,i.kt)("div",t)},S=x("InteractiveExample"),P=x("Indent"),A={toc:w},I="wrapper";function T(e){let{components:t,...n}=e;return(0,i.kt)(I,(0,a.Z)({},A,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"measure"},"measure"),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"measure")," lets you synchronously get the dimensions and position of a view on the screen, all on the ",(0,i.kt)("a",{parentName:"p",href:"/docs/fundamentals/glossary#ui-thread"},"UI thread"),"."),(0,i.kt)("h2",{id:"reference"},"Reference"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx"},"import { measure } from 'react-native-reanimated';\n\nfunction App() {\n  const animatedRef = useAnimatedRef();\n\n  const handlePress = () => {\n    runOnUI(() => {\n      // highlight-next-line\n      const measurement = measure(animatedRef);\n      if (measurement === null) {\n        return;\n      }\n      // ...\n    })();\n  };\n\n  return <Animated.View ref={animatedRef} />;\n}\n")),(0,i.kt)("details",null,(0,i.kt)("summary",null,"Type definitions"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-typescript"},"interface MeasuredDimensions {\n  x: number;\n  y: number;\n  width: number;\n  height: number;\n  pageX: number;\n  pageY: number;\n}\n\nfunction measure<T extends Component>(\n  animatedRef: AnimatedRef<T>\n): MeasuredDimensions | null;\n"))),(0,i.kt)("h3",{id:"arguments"},"Arguments"),(0,i.kt)("h4",{id:"animatedref"},(0,i.kt)("inlineCode",{parentName:"h4"},"animatedRef")),(0,i.kt)("p",null,"An ",(0,i.kt)("a",{parentName:"p",href:"/docs/core/useAnimatedRef#returns"},"animated ref")," connected to the component you'd want to get the measurements from. The animated ref has to be passed either to an ",(0,i.kt)("a",{parentName:"p",href:"/docs/fundamentals/glossary#animated-component"},"Animated component")," or a React Native built-in component."),(0,i.kt)("h3",{id:"returns"},"Returns"),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"measure")," returns an object containing these fields:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"x")," a number representing X coordinate relative to the parent component,"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"y")," a number representing Y coordinate relative to the parent component,"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"width")," a number representing the width of the component,"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"height")," a number representing the height of the component,"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"pageX")," a number representing X coordinate relative to the screen,"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"pageY")," a number representing Y coordinate relative to the screen,")),(0,i.kt)("p",null,"or returns ",(0,i.kt)("inlineCode",{parentName:"p"},"null")," when the measurement couldn't be performed."),(0,i.kt)("h2",{id:"example"},"Example"),(0,i.kt)(S,{src:v,component:(0,i.kt)(g,{mdxType:"MeasureBasic"}),mdxType:"InteractiveExample"}),(0,i.kt)("h2",{id:"remarks"},"Remarks"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"p"},"measure")," is implemented only on the ",(0,i.kt)("a",{parentName:"p",href:"/docs/fundamentals/glossary#ui-thread"},"UI thread"),". When using ",(0,i.kt)("inlineCode",{parentName:"p"},"measure")," inside ",(0,i.kt)("a",{parentName:"p",href:"https://react.dev/learn/responding-to-events#adding-event-handlers"},"event handlers"),", it has to be wrapped with the ",(0,i.kt)("a",{parentName:"p",href:"/docs/threading/runOnUI"},(0,i.kt)("inlineCode",{parentName:"a"},"runOnUI"))," function.")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"The ",(0,i.kt)("inlineCode",{parentName:"p"},"useAnimatedStyle")," function is first evaluated on the ",(0,i.kt)("a",{parentName:"p",href:"/docs/fundamentals/glossary#javascript-thread"},"JavaScript thread")," just before the views are attached to the native side. For this reason, to safely use the measure within ",(0,i.kt)("inlineCode",{parentName:"p"},"useAnimatedStyle"),", a condition similar to the one below must be added to the code:"))),(0,i.kt)(P,{mdxType:"Indent"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx"},"function App() {\n  const animatedStyles = useAnimatedStyle(() => {\n    // highlight-next-line\n    if (_WORKLET) {\n      // safely use measure\n      const measurement = measure(animatedRef);\n    }\n  });\n}\n")),(0,i.kt)("p",null,"Consecutive runs of ",(0,i.kt)("inlineCode",{parentName:"p"},"useAnimatedStyle")," are executed on the UI thread.")),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"When you only need the dimensions of the component and won't use the measurements during animation, consider using the ",(0,i.kt)("a",{parentName:"p",href:"https://reactnative.dev/docs/view#onlayout"},(0,i.kt)("inlineCode",{parentName:"a"},"onLayout"))," property instead.")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"Sometimes, ",(0,i.kt)("inlineCode",{parentName:"p"},"measure")," returns ",(0,i.kt)("inlineCode",{parentName:"p"},"null")," (e.g., when the ",(0,i.kt)("inlineCode",{parentName:"p"},"ref")," hasn't yet attached to the view). It's best to add a ",(0,i.kt)("inlineCode",{parentName:"p"},"null")," check after the measurement for added safety."))),(0,i.kt)(P,{mdxType:"Indent"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx"},"const animatedRef = useAnimatedRef();\n\nconst handlePress = () => {\n  runOnUI(() => {\n    const measurement = measure(animatedRef);\n\n    // highlight-start\n    if (measurement === null) {\n      return;\n    }\n    // highlight-end\n    // ...\n  })();\n};\n"))),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"p"},"measure")," can be used only on rendered components. For instance, attempting to ",(0,i.kt)("inlineCode",{parentName:"p"},"measure")," off-screen items in a ",(0,i.kt)("inlineCode",{parentName:"p"},"FlatList")," will return a ",(0,i.kt)("inlineCode",{parentName:"p"},"null")," value.")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"p"},"measure")," isn't available with the Remote JS Debugger. We highly recommend using Chrome DevTools (also known as ",(0,i.kt)("inlineCode",{parentName:"p"},"chrome://inspect"),") for debugging React Native apps."))),(0,i.kt)("h2",{id:"platform-compatibility"},"Platform compatibility"),(0,i.kt)("div",{className:"compatibility"},(0,i.kt)("table",null,(0,i.kt)("thead",{parentName:"table"},(0,i.kt)("tr",{parentName:"thead"},(0,i.kt)("th",{parentName:"tr",align:null},"Android"),(0,i.kt)("th",{parentName:"tr",align:null},"iOS"),(0,i.kt)("th",{parentName:"tr",align:null},"Web"))),(0,i.kt)("tbody",{parentName:"table"},(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"\u2705"),(0,i.kt)("td",{parentName:"tr",align:null},"\u2705"),(0,i.kt)("td",{parentName:"tr",align:null},"\u2705"))))))}T.isMDXComponent=!0},49638:(e,t,n)=>{n.d(t,{Z:()=>r});var a=n(67177);const r=(0,n(88664).Z)(a.Z)},82334:(e,t,n)=>{n.d(t,{m:()=>d});var a=n(67294),r=n(10758),i=n(38404),s=n(7737),o=n(86425);const l=n.g._IS_FABRIC?function(e){return(0,s.w)(e)}:i.h1;function d(){const e=(0,r.y)(-1),t=(0,a.useRef)();if(!t.current){const a=t=>(t&&(e.value=l(function(e){return n.g._IS_FABRIC&&e.getNativeScrollRef?e.getNativeScrollRef():!n.g._IS_FABRIC&&e.getScrollableNode?e.getScrollableNode():e}(t)),a.current=t),e.value);a.current=null;const r=(0,o.wH)({__init:()=>()=>e.value});(0,o.K_)(a,r),t.current=a}return t.current}},72400:(e,t,n)=>{n.d(t,{Z:()=>d});var a=n(67294),r=n(28033),i=n(88548),s=n(24404),o=a.forwardRef(((e,t)=>{var n=e.accessibilityLabel,r=e.color,o=e.disabled,d=e.onPress,m=e.testID,u=e.title;return a.createElement(i.Z,{accessibilityLabel:n,accessibilityRole:"button",disabled:o,focusable:!o,onPress:d,ref:t,style:[l.button,r&&{backgroundColor:r},o&&l.buttonDisabled],testID:m},a.createElement(s.Z,{style:[l.text,o&&l.textDisabled]},u))}));o.displayName="Button";var l=r.Z.create({button:{backgroundColor:"#2196F3",borderRadius:2},text:{color:"#fff",fontWeight:"500",padding:8,textAlign:"center",textTransform:"uppercase"},buttonDisabled:{backgroundColor:"#dfdfdf"},textDisabled:{color:"#a1a1a1"}});const d=o},88548:(e,t,n)=>{n.d(t,{Z:()=>h});var a=n(83117),r=n(80102),i=n(67294),s=n(16528),o=n(94119),l=n(28033),d=n(67177),m=["activeOpacity","delayPressIn","delayPressOut","delayLongPress","disabled","focusable","onLongPress","onPress","onPressIn","onPressOut","rejectResponderTermination","style"];function u(e,t){var n=e.activeOpacity,l=e.delayPressIn,u=e.delayPressOut,p=e.delayLongPress,h=e.disabled,f=e.focusable,k=e.onLongPress,g=e.onPress,b=e.onPressIn,v=e.onPressOut,y=e.rejectResponderTermination,N=e.style,C=(0,r.Z)(e,m),R=(0,i.useRef)(null),w=(0,s.Z)(t,R),x=(0,i.useState)("0s"),S=x[0],P=x[1],A=(0,i.useState)(null),I=A[0],T=A[1],_=(0,i.useCallback)(((e,t)=>{T(e),P(t?t/1e3+"s":"0s")}),[T,P]),Z=(0,i.useCallback)((e=>{_(null!=n?n:.2,e)}),[n,_]),D=(0,i.useCallback)((e=>{_(null,e)}),[_]),O=(0,i.useMemo)((()=>({cancelable:!y,disabled:h,delayLongPress:p,delayPressStart:l,delayPressEnd:u,onLongPress:k,onPress:g,onPressStart(e){var t=null!=e.dispatchConfig?"onResponderGrant"===e.dispatchConfig.registrationName:"keydown"===e.type;Z(t?0:150),null!=b&&b(e)},onPressEnd(e){D(250),null!=v&&v(e)}})),[p,l,u,h,k,g,b,v,y,Z,D]),E=(0,o.Z)(R,O);return i.createElement(d.Z,(0,a.Z)({},C,E,{accessibilityDisabled:h,focusable:!h&&!1!==f,pointerEvents:h?"none":void 0,ref:w,style:[c.root,!h&&c.actionable,N,null!=I&&{opacity:I},{transitionDuration:S}]}))}var c=l.Z.create({root:{transitionProperty:"opacity",transitionDuration:"0.15s",userSelect:"none"},actionable:{cursor:"pointer",touchAction:"manipulation"}}),p=i.memo(i.forwardRef(u));p.displayName="TouchableOpacity";const h=p}}]);