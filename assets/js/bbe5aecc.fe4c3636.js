"use strict";(self.webpackChunkreact_native_reanimated_docs=self.webpackChunkreact_native_reanimated_docs||[]).push([[6452],{44825:(e,t,n)=>{n.d(t,{Z:()=>h});var a=n(67294),i=n(67177),r=n(72400),o=n(28033),s=n(88664),l=n(10758),p=n(26877),d=n(6328),m=n(6848);const c=s.Z(m.Circle),u={code:"function anonymous(){const{withTiming,r}=this._closure;return{r:withTiming(r.value)};}",location:"/home/runner/work/react-native-reanimated/react-native-reanimated/docs/src/examples/AnimatingProps.jsx"};function h(){const e=(0,l.y)(20),t=(0,p.uz)(function(){const t=()=>({r:(0,d.j)(e.value)});return t._closure={withTiming:d.j,r:e},t.__initData=u,t.__workletHash=4157648230789,t}());return a.createElement(i.Z,{style:k.container},a.createElement(m.Svg,{style:k.svg},a.createElement(c,{cx:"50%",cy:"50%",fill:"#b58df1",animatedProps:t})),a.createElement(r.Z,{onPress:()=>{e.value+=10},title:"Click me"}))}const k=o.Z.create({container:{flex:1,alignItems:"center"},svg:{height:250,width:"100%"}})},79156:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>m,contentTitle:()=>p,default:()=>y,frontMatter:()=>l,metadata:()=>d,toc:()=>c});var a=n(83117),i=(n(67294),n(3905));const r="import React from 'react';\nimport { Svg, Ellipse } from 'react-native-svg';\nimport Animated, {\n  createAnimatedPropAdapter,\n  processColor,\n  useAnimatedProps,\n  useSharedValue,\n  withRepeat,\n  withTiming,\n} from 'react-native-reanimated';\n\nconst AnimatedEllipse = Animated.createAnimatedComponent(Ellipse);\n\n// highlight-next-line\nconst adapter = createAnimatedPropAdapter(\n  (props) => {\n    if (Object.keys(props).includes('fill')) {\n      props.fill = { type: 0, payload: processColor(props.fill) };\n    }\n    if (Object.keys(props).includes('stroke')) {\n      props.stroke = { type: 0, payload: processColor(props.stroke) };\n    }\n  },\n  ['fill', 'stroke']\n  // highlight-next-line\n);\n\nexport default function App() {\n  const opacity = useSharedValue(0);\n\n  React.useEffect(() => {\n    opacity.value = withRepeat(withTiming(1), -1, true);\n  }, []);\n\n  const ellipseAnimatedProps = useAnimatedProps(\n    () => {\n      const coordinates = { cx: 50, cy: 50, rx: 40, ry: 40 };\n\n      return {\n        cx: coordinates.cx,\n        cy: coordinates.cy,\n        rx: coordinates.rx,\n        ry: coordinates.ry,\n        stroke: 'rgb(255,0,0)',\n        fill: 'yellow',\n        opacity: opacity.value,\n        strokeWidth: 2,\n      };\n    },\n    [],\n    // highlight-next-line\n    adapter\n  );\n\n  return (\n    <Svg width=\"100%\" height=\"100%\">\n      <AnimatedEllipse animatedProps={ellipseAnimatedProps} />\n    </Svg>\n  );\n}\n";var o=n(44825),s=n(66083);const l={sidebar_position:3},p="useAnimatedProps",d={unversionedId:"core/useAnimatedProps",id:"core/useAnimatedProps",title:"useAnimatedProps",description:"useAnimatedStyle lets you create an animated props object which can be animated using shared values. This object is used to animate properties of third-party components.",source:"@site/docs/core/useAnimatedProps.mdx",sourceDirName:"core",slug:"/core/useAnimatedProps",permalink:"/react-native-reanimated/docs/core/useAnimatedProps",draft:!1,editUrl:"https://github.com/software-mansion/react-native-reanimated/edit/main/docs/core/useAnimatedProps.mdx",tags:[],version:"current",sidebarPosition:3,frontMatter:{sidebar_position:3},sidebar:"tutorialSidebar",previous:{title:"useAnimatedStyle",permalink:"/react-native-reanimated/docs/core/useAnimatedStyle"},next:{title:"useAnimatedRef",permalink:"/react-native-reanimated/docs/core/useAnimatedRef"}},m={},c=[{value:"Reference",id:"reference",level:2},{value:"Arguments",id:"arguments",level:3},{value:"<code>updater</code>",id:"updater",level:4},{value:"<code>dependencies</code> <Optional/>",id:"dependencies-",level:4},{value:"<code>adapters</code> <Optional/>",id:"adapters-",level:4},{value:"Returns",id:"returns",level:2},{value:"Example",id:"example",level:2},{value:"Remarks",id:"remarks",level:2},{value:"Platform compatibility",id:"platform-compatibility",level:2}],u=e=>function(t){return console.warn("Component "+e+" was not imported, exported, or provided by MDXProvider as global scope"),(0,i.kt)("div",t)},h=u("Optional"),k=u("CollapsibleCode"),f=u("InteractiveExample"),g={toc:c},v="wrapper";function y(e){let{components:t,...n}=e;return(0,i.kt)(v,(0,a.Z)({},g,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"useanimatedprops"},"useAnimatedProps"),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"useAnimatedStyle")," lets you create an animated props object which can be animated using ",(0,i.kt)("a",{parentName:"p",href:"/docs/fundamentals/glossary#shared-value"},"shared values"),". This object is used to animate properties of third-party components."),(0,i.kt)("p",null,"For animating style use ",(0,i.kt)("a",{parentName:"p",href:"/docs/core/useAnimatedStyle"},(0,i.kt)("inlineCode",{parentName:"a"},"useAnimatedStyle"))," instead."),(0,i.kt)("h2",{id:"reference"},"Reference"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx"},'import { useAnimatedProps } from "react-native-reanimated";\n\nfunction App() {\n  // highlight-next-line\n  const animatedProps = useAnimatedProps(() => {\n    return {\n      opacity: sv.value ? 1 : 0;\n    };\n  // highlight-next-line\n  });\n\n  // highlight-next-line\n  return <Animated.View animatedProps={animatedProps} />\n}\n')),(0,i.kt)("details",null,(0,i.kt)("summary",null,"Type definitions"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-typescript"},"function useAnimatedProps<T extends {}>(\n  updater: () => Partial<T>,\n  dependencies?: DependencyList | null,\n  adapters?: PropsAdapterFunction | PropsAdapterFunction[] | null\n): Partial<T>;\n"))),(0,i.kt)("h3",{id:"arguments"},"Arguments"),(0,i.kt)("h4",{id:"updater"},(0,i.kt)("inlineCode",{parentName:"h4"},"updater")),(0,i.kt)("p",null,"A function returning an object with properties you want to animate."),(0,i.kt)("h4",{id:"dependencies-"},(0,i.kt)("inlineCode",{parentName:"h4"},"dependencies")," ",(0,i.kt)(h,{mdxType:"Optional"})),(0,i.kt)("p",null,"An optional array of dependencies."),(0,i.kt)("p",null,"Only relevant when using Reanimated ",(0,i.kt)("a",{parentName:"p",href:"https://docs.swmansion.com/react-native-reanimated/docs/fundamentals/web-support#web-without-a-babel-plugin"},"without the Babel plugin on the Web"),"."),(0,i.kt)("h4",{id:"adapters-"},(0,i.kt)("inlineCode",{parentName:"h4"},"adapters")," ",(0,i.kt)(h,{mdxType:"Optional"})),(0,i.kt)("p",null,"An optional function or an array of functions."),(0,i.kt)("p",null,"Sometimes when working with third-party libraries properties might be named differently on the API surface from what they really represent on the native side. Adapters make it possible to handle these cases by defining a way to convert these props."),(0,i.kt)("p",null,"Reanimated comes with two built-in adapters:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"https://github.com/software-mansion/react-native-reanimated/blob/Reanimated2/src/reanimated2/PropAdapters.ts#L19"},(0,i.kt)("inlineCode",{parentName:"a"},"SVGAdapter"))," for handling ",(0,i.kt)("inlineCode",{parentName:"li"},"transform")," property in ",(0,i.kt)("inlineCode",{parentName:"li"},"react-native-svg")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"https://github.com/software-mansion/react-native-reanimated/blob/Reanimated2/src/reanimated2/PropAdapters.ts#L57"},(0,i.kt)("inlineCode",{parentName:"a"},"TextInputAdapter")),".")),(0,i.kt)("p",null,"You can create your own adapters using ",(0,i.kt)("inlineCode",{parentName:"p"},"createAnimatedPropAdapter")," function."),(0,i.kt)("p",null,"Here's an example of adapting ",(0,i.kt)("inlineCode",{parentName:"p"},"fill")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"stroke")," properties from ",(0,i.kt)("inlineCode",{parentName:"p"},"react-native-svg")," to be able to animate them with Reanimated."),(0,i.kt)(k,{showLines:[13,25],src:r,mdxType:"CollapsibleCode"}),(0,i.kt)("h2",{id:"returns"},"Returns"),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"useAnimatedProps")," returns an animated props object which has to be passed to ",(0,i.kt)("inlineCode",{parentName:"p"},"animatedProps")," property of an ",(0,i.kt)("a",{parentName:"p",href:"/docs/fundamentals/glossary#animated-component"},"Animated component")," that you want to animate."),(0,i.kt)("h2",{id:"example"},"Example"),(0,i.kt)(f,{src:s.Z,component:(0,i.kt)(o.Z,{mdxType:"AnimatingProps"}),mdxType:"InteractiveExample"}),(0,i.kt)("h2",{id:"remarks"},"Remarks"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"You can share animated props between components to avoid code duplication."),(0,i.kt)("li",{parentName:"ul"},"We recommend to create adapters outside of the component's body to avoid unnecessary recalculations.")),(0,i.kt)("h2",{id:"platform-compatibility"},"Platform compatibility"),(0,i.kt)("div",{className:"compatibility"},(0,i.kt)("table",null,(0,i.kt)("thead",{parentName:"table"},(0,i.kt)("tr",{parentName:"thead"},(0,i.kt)("th",{parentName:"tr",align:null},"Android"),(0,i.kt)("th",{parentName:"tr",align:null},"iOS"),(0,i.kt)("th",{parentName:"tr",align:null},"Web"))),(0,i.kt)("tbody",{parentName:"table"},(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"\u2705"),(0,i.kt)("td",{parentName:"tr",align:null},"\u2705"),(0,i.kt)("td",{parentName:"tr",align:null},"\u2705"))))))}y.isMDXComponent=!0},66083:(e,t,n)=>{n.d(t,{Z:()=>a});const a="import React from 'react';\nimport { Button, View, StyleSheet } from 'react-native';\nimport Animated, {\n  useSharedValue,\n  useAnimatedProps,\n  withTiming,\n} from 'react-native-reanimated';\nimport { Svg, Circle } from 'react-native-svg';\n\nconst AnimatedCircle = Animated.createAnimatedComponent(Circle);\n\nexport default function App() {\n  const r = useSharedValue(20);\n\n  const handlePress = () => {\n    r.value += 10;\n  };\n\n  // highlight-start\n  const animatedProps = useAnimatedProps(() => ({\n    r: withTiming(r.value),\n  }));\n  // highlight-end\n\n  return (\n    <View style={styles.container}>\n      <Svg style={styles.svg}>\n        <AnimatedCircle\n          cx=\"50%\"\n          cy=\"50%\"\n          fill=\"#b58df1\"\n          // highlight-next-line\n          animatedProps={animatedProps}\n        />\n      </Svg>\n      <Button onPress={handlePress} title=\"Click me\" />\n    </View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    alignItems: 'center',\n  },\n  svg: {\n    height: 250,\n    width: '100%',\n  },\n});\n"}}]);