"use strict";(self.webpackChunkreact_native_reanimated_docs=self.webpackChunkreact_native_reanimated_docs||[]).push([[3372],{60582:(e,t,n)=>{n.d(t,{Z:()=>v});var a=n(67294),i=n(67177),r=n(72400),o=n(28033),l=n(87827),s=n(10758),m=n(35842),d=n(12448),c=n(6328),u=n(347),p=n(49638);const h=10,f=100,k=l.o.elastic(1.5),g={code:'function anonymous(){const{rotation}=this._closure;return{transform:[{rotateZ:rotation.value+"deg"}]};}',location:"/home/runner/work/react-native-reanimated/react-native-reanimated/docs/src/examples/SequenceWobble.jsx"};function v(){const e=(0,s.y)(0),t=(0,m.l)(function(){const t=()=>({transform:[{rotateZ:`${e.value}deg`}]});return t._closure={rotation:e},t.__initData=g,t.__workletHash=5517220837954,t}());return a.createElement(i.Z,{style:b.container},a.createElement(p.Z,{style:[b.box,t]}),a.createElement(r.Z,{title:"wobble",onPress:()=>{e.value=(0,d.u)((0,c.j)(-h,{duration:f/2,easing:k}),(0,u.D)((0,c.j)(h,{duration:f,easing:k}),7,!0),(0,c.j)(0,{duration:f/2,easing:k}))}}))}const b=o.Z.create({container:{flex:1,alignItems:"center",justifyContent:"center",height:"100%"},box:{height:120,width:120,backgroundColor:"#b58df1",borderRadius:20,marginBottom:30}})},21174:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>R,contentTitle:()=>x,default:()=>V,frontMatter:()=>N,metadata:()=>S,toc:()=>A});var a=n(83117),i=n(67294),r=n(3905),o=n(87827),l=n(10758),s=n(347),m=n(6328),d=n(35842),c=n(49638),u=n(67177),p=n(28033);const h=2e3,f=o.o.bezier(.25,-.5,.25,1),k={code:'function anonymous(){const{sv}=this._closure;return{transform:[{rotate:sv.value*360+"deg"}]};}',location:"/home/runner/work/react-native-reanimated/react-native-reanimated/docs/src/examples/RepeatBasic.jsx"};function g(){const e=(0,l.y)(0);i.useEffect((()=>{e.value=(0,s.D)((0,m.j)(1,{duration:h,easing:f}),-1)}),[]);const t=(0,d.l)(function(){const t=()=>({transform:[{rotate:360*e.value+"deg"}]});return t._closure={sv:e},t.__initData=k,t.__workletHash=0xe9c7d2fa387,t}());return i.createElement(u.Z,{style:v.container},i.createElement(c.Z,{style:[v.box,t]}))}const v=p.Z.create({container:{flex:1,alignItems:"center",justifyContent:"center",height:"100%"},box:{height:120,width:120,backgroundColor:"#b58df1",borderRadius:20}}),b="import React from 'react';\nimport Animated, {\n  Easing,\n  useAnimatedStyle,\n  useSharedValue,\n  withRepeat,\n  withTiming,\n} from 'react-native-reanimated';\nimport { StyleSheet, View } from 'react-native';\n\nconst duration = 2000;\nconst easing = Easing.bezier(0.25, -0.5, 0.25, 1);\n\nexport default function App() {\n  const sv = useSharedValue(0);\n\n  React.useEffect(() => {\n    // highlight-next-line\n    sv.value = withRepeat(withTiming(1, { duration, easing }), -1);\n  }, []);\n\n  const animatedStyle = useAnimatedStyle(() => ({\n    transform: [{ rotate: `${sv.value * 360}deg` }],\n  }));\n\n  return (\n    <View style={styles.container}>\n      <Animated.View style={[styles.box, animatedStyle]} />\n    </View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    alignItems: 'center',\n    justifyContent: 'center',\n    height: '100%',\n  },\n  box: {\n    height: 120,\n    width: 120,\n    backgroundColor: '#b58df1',\n    borderRadius: 20,\n  },\n});\n";var y=n(60582),w=n(28709);const N={sidebar_position:5},x="withRepeat",S={unversionedId:"animations/withRepeat",id:"animations/withRepeat",title:"withRepeat",description:"withRepeat is an animation modifier that lets you repeat an animation given number of times or run it indefinitely.",source:"@site/docs/animations/withRepeat.mdx",sourceDirName:"animations",slug:"/animations/withRepeat",permalink:"/react-native-reanimated/docs/animations/withRepeat",draft:!1,editUrl:"https://github.com/software-mansion/react-native-reanimated/edit/main/docs/animations/withRepeat.mdx",tags:[],version:"current",sidebarPosition:5,frontMatter:{sidebar_position:5},sidebar:"tutorialSidebar",previous:{title:"withSequence",permalink:"/react-native-reanimated/docs/animations/withSequence"},next:{title:"withDelay",permalink:"/react-native-reanimated/docs/animations/withDelay"}},R={},A=[{value:"Reference",id:"reference",level:2},{value:"Arguments",id:"arguments",level:3},{value:"<code>animation</code>",id:"animation",level:4},{value:"<code>numberOfReps</code> <Optional />",id:"numberofreps-",level:4},{value:"<code>reverse</code> <Optional />",id:"reverse-",level:4},{value:"<code>callback</code> <Optional />",id:"callback-",level:4},{value:"Returns",id:"returns",level:3},{value:"Example",id:"example",level:2},{value:"Remarks",id:"remarks",level:2},{value:"Platform compatibility",id:"platform-compatibility",level:2}],E=e=>function(t){return console.warn("Component "+e+" was not imported, exported, or provided by MDXProvider as global scope"),(0,r.kt)("div",t)},C=E("InteractiveExample"),T=E("Optional"),_={toc:A},I="wrapper";function V(e){let{components:t,...n}=e;return(0,r.kt)(I,(0,a.Z)({},_,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"withrepeat"},"withRepeat"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"withRepeat")," is an ",(0,r.kt)("a",{parentName:"p",href:"/docs/fundamentals/glossary#animation-modifier"},"animation modifier")," that lets you repeat an animation given number of times or run it indefinitely."),(0,r.kt)(C,{src:b,component:(0,r.kt)(g,{mdxType:"RepeatBasic"}),mdxType:"InteractiveExample"}),(0,r.kt)("h2",{id:"reference"},"Reference"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},"import { withRepeat } from 'react-native-reanimated';\n\nfunction App() {\n  sv.value = withRepeat(withSpring(0), 5);\n  // ...\n}\n")),(0,r.kt)("details",null,(0,r.kt)("summary",null,"Type definitions"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},"type AnimatableValue = number | string | number[];\n\nfunction withRepeat<T extends AnimatableValue>(\n  animation: T,\n  numberOfReps?: number,\n  reverse?: boolean,\n  callback?: (finished?: boolean, current?: AnimatableValue) => void\n): T;\n"))),(0,r.kt)("h3",{id:"arguments"},"Arguments"),(0,r.kt)("h4",{id:"animation"},(0,r.kt)("inlineCode",{parentName:"h4"},"animation")),(0,r.kt)("p",null,"The animation you want to repeat."),(0,r.kt)("h4",{id:"numberofreps-"},(0,r.kt)("inlineCode",{parentName:"h4"},"numberOfReps")," ",(0,r.kt)(T,{mdxType:"Optional"})),(0,r.kt)("p",null,"The number of times the animation is going to be repeated. Defaults to ",(0,r.kt)("inlineCode",{parentName:"p"},"2"),"."),(0,r.kt)("p",null,"A non-positive value (e.g. ",(0,r.kt)("inlineCode",{parentName:"p"},"0")," or ",(0,r.kt)("inlineCode",{parentName:"p"},"-1"),") will cause the animation to repeat indefinitely until it is cancelled or torn down. For example, if the component unmounts or ",(0,r.kt)("a",{parentName:"p",href:"/docs/core/cancelAnimation"},(0,r.kt)("inlineCode",{parentName:"a"},"cancelAnimation"))," was called."),(0,r.kt)("h4",{id:"reverse-"},(0,r.kt)("inlineCode",{parentName:"h4"},"reverse")," ",(0,r.kt)(T,{mdxType:"Optional"})),(0,r.kt)("p",null,"Whether the animation should run in reverse every other repetition. Defaults to ",(0,r.kt)("inlineCode",{parentName:"p"},"false"),"."),(0,r.kt)("p",null,"This option only supports ",(0,r.kt)("a",{parentName:"p",href:"/docs/fundamentals/glossary#animation-function"},"animation functions")," (eg. ",(0,r.kt)("a",{parentName:"p",href:"/docs/animations/withSpring"},(0,r.kt)("inlineCode",{parentName:"a"},"withSpring")),") and doesn't work with ",(0,r.kt)("a",{parentName:"p",href:"/docs/fundamentals/glossary#animation-modifier"},"animation modifiers")," (eg. ",(0,r.kt)("a",{parentName:"p",href:"/docs/animations/withSequence"},(0,r.kt)("inlineCode",{parentName:"a"},"withSequence")),")."),(0,r.kt)("h4",{id:"callback-"},(0,r.kt)("inlineCode",{parentName:"h4"},"callback")," ",(0,r.kt)(T,{mdxType:"Optional"})),(0,r.kt)("p",null,"A function called on animation complete. In case the animation is cancelled, the callback will receive ",(0,r.kt)("inlineCode",{parentName:"p"},"false")," as the argument, otherwise it will receive ",(0,r.kt)("inlineCode",{parentName:"p"},"true"),"."),(0,r.kt)("h3",{id:"returns"},"Returns"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"withRepeat")," returns an ",(0,r.kt)("a",{parentName:"p",href:"/docs/fundamentals/glossary#animation-object"},"animation object"),". It can be either assigned directly to a ",(0,r.kt)("a",{parentName:"p",href:"/docs/fundamentals/glossary#shared-value"},"shared value")," or can be used as a value for a style object returned from ",(0,r.kt)("a",{parentName:"p",href:"docs/core/useAnimatedStyle"},"useAnimatedStyle"),"."),(0,r.kt)("h2",{id:"example"},"Example"),(0,r.kt)(C,{src:w.Z,component:(0,r.kt)(y.Z,{mdxType:"SequenceWobble"}),mdxType:"InteractiveExample"}),(0,r.kt)("h2",{id:"remarks"},"Remarks"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"The callback passed to the 4th argument is automatically ",(0,r.kt)("a",{parentName:"li",href:"/docs/fundamentals/glossary#to-workletize"},"workletized")," and ran on the ",(0,r.kt)("a",{parentName:"li",href:"/docs/fundamentals/glossary#ui-thread"},"UI thread"),".")),(0,r.kt)("h2",{id:"platform-compatibility"},"Platform compatibility"),(0,r.kt)("div",{className:"compatibility"},(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Android"),(0,r.kt)("th",{parentName:"tr",align:null},"iOS"),(0,r.kt)("th",{parentName:"tr",align:null},"Web"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"\u2705"),(0,r.kt)("td",{parentName:"tr",align:null},"\u2705"),(0,r.kt)("td",{parentName:"tr",align:null},"\u2705"))))))}V.isMDXComponent=!0},28709:(e,t,n)=>{n.d(t,{Z:()=>a});const a="import React from 'react';\nimport { View, Button, StyleSheet } from 'react-native';\nimport Animated, {\n  useSharedValue,\n  withTiming,\n  Easing,\n  useAnimatedStyle,\n  withRepeat,\n  withSequence,\n} from 'react-native-reanimated';\n\nconst ANGLE = 10;\nconst TIME = 100;\nconst EASING = Easing.elastic(1.5);\n\nexport default function App() {\n  const rotation = useSharedValue(0);\n\n  const animatedStyle = useAnimatedStyle(() => ({\n    transform: [{ rotateZ: `${rotation.value}deg` }],\n  }));\n\n  const handlePress = () => {\n    // highlight-next-line\n    rotation.value = withSequence(\n      // deviate left to start from -ANGLE\n      withTiming(-ANGLE, { duration: TIME / 2, easing: EASING }),\n      // wobble between -ANGLE and ANGLE 7 times\n      withRepeat(\n        withTiming(ANGLE, {\n          duration: TIME,\n          easing: EASING,\n        }),\n        7,\n        true\n      ),\n      // go back to 0 at the end\n      withTiming(0, { duration: TIME / 2, easing: EASING })\n      // highlight-next-line\n    );\n  };\n\n  return (\n    <View style={styles.container}>\n      <Animated.View style={[styles.box, animatedStyle]} />\n      <Button title=\"wobble\" onPress={handlePress} />\n    </View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    alignItems: 'center',\n    justifyContent: 'center',\n    height: '100%',\n  },\n  box: {\n    height: 120,\n    width: 120,\n    backgroundColor: '#b58df1',\n    borderRadius: 20,\n    marginBottom: 30,\n  },\n});\n"}}]);