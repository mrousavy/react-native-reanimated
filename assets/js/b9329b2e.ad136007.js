"use strict";(self.webpackChunkreact_native_reanimated_docs=self.webpackChunkreact_native_reanimated_docs||[]).push([[2249],{46978:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>k,contentTitle:()=>v,default:()=>C,frontMatter:()=>h,metadata:()=>y,toc:()=>b});var n=a(83117),r=a(67294),l=a(3905),i=a(67177),s=a(72400),o=a(28033),d=a(10758),u=a(49638);function c(){const e=(0,d.y)(100);return r.createElement(i.Z,{style:p.container},r.createElement(u.Z,{style:{...p.box,width:e}}),r.createElement(s.Z,{onPress:()=>{e.value+=50},title:"Click me"}))}const p=o.Z.create({container:{flex:1,alignItems:"center"},box:{height:100,backgroundColor:"#b58df1",borderRadius:20,marginVertical:64}}),m="import React from 'react';\nimport { Button, StyleSheet, View } from 'react-native';\nimport Animated, { useSharedValue } from 'react-native-reanimated';\n\nexport default function App() {\n  // highlight-next-line\n  const width = useSharedValue(100);\n\n  const handlePress = () => {\n    // highlight-next-line\n    width.value += 50;\n  };\n\n  return (\n    <View style={styles.container}>\n      <Animated.View style={{ ...styles.box, width }} />\n      <Button onPress={handlePress} title=\"Click me\" />\n    </View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    alignItems: 'center',\n  },\n  box: {\n    height: 100,\n    backgroundColor: '#b58df1',\n    borderRadius: 20,\n    marginVertical: 64,\n  },\n});\n",h={sidebar_position:1},v="useSharedValue",y={unversionedId:"core/useSharedValue",id:"core/useSharedValue",title:"useSharedValue",description:"useSharedValue lets you define shared values in your components.",source:"@site/docs/core/useSharedValue.mdx",sourceDirName:"core",slug:"/core/useSharedValue",permalink:"/react-native-reanimated/docs/core/useSharedValue",draft:!1,editUrl:"https://github.com/software-mansion/react-native-reanimated/edit/main/docs/core/useSharedValue.mdx",tags:[],version:"current",sidebarPosition:1,frontMatter:{sidebar_position:1},sidebar:"tutorialSidebar",previous:{title:"Core",permalink:"/react-native-reanimated/docs/category/core"},next:{title:"useAnimatedStyle",permalink:"/react-native-reanimated/docs/core/useAnimatedStyle"}},k={},b=[{value:"Reference",id:"reference",level:2},{value:"Arguments",id:"arguments",level:3},{value:"<code>initialValue</code>",id:"initialvalue",level:4},{value:"Returns",id:"returns",level:3},{value:"Example",id:"example",level:2},{value:"Remarks",id:"remarks",level:2},{value:"Platform compatibility",id:"platform-compatibility",level:2}],g=e=>function(t){return console.warn("Component "+e+" was not imported, exported, or provided by MDXProvider as global scope"),(0,l.kt)("div",t)},f=g("InteractiveExample"),N=g("Indent"),S={toc:b},w="wrapper";function C(e){let{components:t,...a}=e;return(0,l.kt)(w,(0,n.Z)({},S,a,{components:t,mdxType:"MDXLayout"}),(0,l.kt)("h1",{id:"usesharedvalue"},"useSharedValue"),(0,l.kt)("p",null,(0,l.kt)("inlineCode",{parentName:"p"},"useSharedValue")," lets you define ",(0,l.kt)("a",{parentName:"p",href:"/docs/fundamentals/glossary#shared-value"},"shared values")," in your components."),(0,l.kt)("h2",{id:"reference"},"Reference"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-javascript"},"import { useSharedValue } from 'react-native-reanimated';\n\nfunction App() {\n  const sv = useSharedValue(100);\n\n  // read a shared value\n  console.log(sv.value);\n\n  // and modify it\n  sv.value += 50;\n}\n")),(0,l.kt)("details",null,(0,l.kt)("summary",null,"Type definitions"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-typescript"},"type SharedValue<T> = { value: T };\n\nfunction useSharedValue<T>(initialValue: T): SharedValue<T>;\n"))),(0,l.kt)("h3",{id:"arguments"},"Arguments"),(0,l.kt)("h4",{id:"initialvalue"},(0,l.kt)("inlineCode",{parentName:"h4"},"initialValue")),(0,l.kt)("p",null,"The value you want to be initially stored to a ",(0,l.kt)("inlineCode",{parentName:"p"},".value")," property. It can be any JavaScript value like ",(0,l.kt)("inlineCode",{parentName:"p"},"number"),", ",(0,l.kt)("inlineCode",{parentName:"p"},"string")," or ",(0,l.kt)("inlineCode",{parentName:"p"},"boolean")," but also data structures such as ",(0,l.kt)("inlineCode",{parentName:"p"},"array")," and ",(0,l.kt)("inlineCode",{parentName:"p"},"object"),"."),(0,l.kt)("h3",{id:"returns"},"Returns"),(0,l.kt)("p",null,(0,l.kt)("inlineCode",{parentName:"p"},"useSharedValue")," returns a shared value with a single ",(0,l.kt)("inlineCode",{parentName:"p"},"value")," property initially set to the ",(0,l.kt)("inlineCode",{parentName:"p"},"initialValue"),"."),(0,l.kt)("p",null,"Values stored in shared values can be accessed and modified by their ",(0,l.kt)("inlineCode",{parentName:"p"},".value")," property."),(0,l.kt)("h2",{id:"example"},"Example"),(0,l.kt)(f,{src:m,component:(0,l.kt)(c,{mdxType:"SharedValue"}),showCode:!0,mdxType:"InteractiveExample"}),(0,l.kt)("h2",{id:"remarks"},"Remarks"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"When you change the ",(0,l.kt)("inlineCode",{parentName:"p"},"sv.value")," Reanimated will update the styles and keep the shared value in sync between the threads. However, this won't trigger a typical React re-render because a shared value is a plain JavaScript object.")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"When you change the ",(0,l.kt)("inlineCode",{parentName:"p"},"sv.value")," the update will happen synchronously on the ",(0,l.kt)("a",{parentName:"p",href:"/docs/fundamentals/glossary#ui-thread"},"UI thread"),". On the other hand, on the ",(0,l.kt)("a",{parentName:"p",href:"/docs/fundamentals/glossary#javascript-thread"},"JavaScript thread")," the update is asynchronous. This means when you try to immediately log the ",(0,l.kt)("inlineCode",{parentName:"p"},"value")," after the change it will log the previously stored value."))),(0,l.kt)(N,{mdxType:"Indent"},(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-javascript"},"function App() {\n  const sv = useSharedValue(100); // initially set 100\n\n  sv.value += 50; // changing value stored in a shared value\n\n  console.log(sv.value); // will still log 100\n}\n"))),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"Stay away from ",(0,l.kt)("a",{parentName:"li",href:"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Destructuring_assignment"},"destructuring assignment")," when working with shared values. While this is a completely valid JavaScript code it will make Reanimated unable to keep the reactivity of a shared value.")),(0,l.kt)(N,{mdxType:"Indent"},(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-javascript"},"function App() {\n  let { value } = sv; // don't do this\n\n  console.log(value); // you can read the value just fine\n\n  value += 50; // but this won't update the styles\n}\n"))),(0,l.kt)("h2",{id:"platform-compatibility"},"Platform compatibility"),(0,l.kt)("div",{className:"compatibility"},(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null},"Android"),(0,l.kt)("th",{parentName:"tr",align:null},"iOS"),(0,l.kt)("th",{parentName:"tr",align:null},"Web"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"\u2705"),(0,l.kt)("td",{parentName:"tr",align:null},"\u2705"),(0,l.kt)("td",{parentName:"tr",align:null},"\u2705"))))))}C.isMDXComponent=!0},49638:(e,t,a)=>{a.d(t,{Z:()=>r});var n=a(67177);const r=(0,a(88664).Z)(n.Z)},72400:(e,t,a)=>{a.d(t,{Z:()=>d});var n=a(67294),r=a(28033),l=a(88548),i=a(24404),s=n.forwardRef(((e,t)=>{var a=e.accessibilityLabel,r=e.color,s=e.disabled,d=e.onPress,u=e.testID,c=e.title;return n.createElement(l.Z,{accessibilityLabel:a,accessibilityRole:"button",disabled:s,focusable:!s,onPress:d,ref:t,style:[o.button,r&&{backgroundColor:r},s&&o.buttonDisabled],testID:u},n.createElement(i.Z,{style:[o.text,s&&o.textDisabled]},c))}));s.displayName="Button";var o=r.Z.create({button:{backgroundColor:"#2196F3",borderRadius:2},text:{color:"#fff",fontWeight:"500",padding:8,textAlign:"center",textTransform:"uppercase"},buttonDisabled:{backgroundColor:"#dfdfdf"},textDisabled:{color:"#a1a1a1"}});const d=s},88548:(e,t,a)=>{a.d(t,{Z:()=>h});var n=a(83117),r=a(80102),l=a(67294),i=a(16528),s=a(94119),o=a(28033),d=a(67177),u=["activeOpacity","delayPressIn","delayPressOut","delayLongPress","disabled","focusable","onLongPress","onPress","onPressIn","onPressOut","rejectResponderTermination","style"];function c(e,t){var a=e.activeOpacity,o=e.delayPressIn,c=e.delayPressOut,m=e.delayLongPress,h=e.disabled,v=e.focusable,y=e.onLongPress,k=e.onPress,b=e.onPressIn,g=e.onPressOut,f=e.rejectResponderTermination,N=e.style,S=(0,r.Z)(e,u),w=(0,l.useRef)(null),C=(0,i.Z)(t,w),P=(0,l.useState)("0s"),V=P[0],x=P[1],R=(0,l.useState)(null),Z=R[0],T=R[1],I=(0,l.useCallback)(((e,t)=>{T(e),x(t?t/1e3+"s":"0s")}),[T,x]),D=(0,l.useCallback)((e=>{I(null!=a?a:.2,e)}),[a,I]),A=(0,l.useCallback)((e=>{I(null,e)}),[I]),E=(0,l.useMemo)((()=>({cancelable:!f,disabled:h,delayLongPress:m,delayPressStart:o,delayPressEnd:c,onLongPress:y,onPress:k,onPressStart(e){var t=null!=e.dispatchConfig?"onResponderGrant"===e.dispatchConfig.registrationName:"keydown"===e.type;D(t?0:150),null!=b&&b(e)},onPressEnd(e){A(250),null!=g&&g(e)}})),[m,o,c,h,y,k,b,g,f,D,A]),O=(0,s.Z)(w,E);return l.createElement(d.Z,(0,n.Z)({},S,O,{accessibilityDisabled:h,focusable:!h&&!1!==v,pointerEvents:h?"none":void 0,ref:C,style:[p.root,!h&&p.actionable,N,null!=Z&&{opacity:Z},{transitionDuration:V}]}))}var p=o.Z.create({root:{transitionProperty:"opacity",transitionDuration:"0.15s",userSelect:"none"},actionable:{cursor:"pointer",touchAction:"manipulation"}}),m=l.memo(l.forwardRef(c));m.displayName="TouchableOpacity";const h=m}}]);